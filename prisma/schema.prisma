generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["debian-openssl-1.1.x", "debian-openssl-3.0.x"]
  engineType    = "binary"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String        @id @default(cuid())
  username       String        @unique
  firstName      String?
  lastName       String?
  email          String        @unique
  profilePicture String?
  status         String?
  statusMessage   String?      // Custom away message
  useAIResponse   Boolean      @default(false)  // Whether to use AI or custom message
  userRole       String        @default("USER")
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  channels       ChannelUser[]
  messages       Message[]     // Messages sent by this user
  receivedMessages Message[]   @relation("MessageRecipient") // Messages received by this user
  messageReads   MessageRead[]
  aiProofingSettings AIProofingSettings?
}

model Channel {
  id        String        @id @default(cuid())
  name      String
  isPrivate Boolean      @default(false)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  users     ChannelUser[]
  messages  Message[]
}

model ChannelUser {
  id        String   @id @default(cuid())
  channel   Channel  @relation(fields: [channelId], references: [id])
  channelId String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  joinedAt  DateTime @default(now())

  @@unique([channelId, userId])
}

model Message {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  files     File[]
  
  // Sender
  user      User     @relation(fields: [userId], references: [id])
  userId    String

  // Optional channel (null for direct messages)
  channel   Channel? @relation(fields: [channelId], references: [id])
  channelId String?

  // Optional recipient (null for channel messages)
  recipient User?    @relation("MessageRecipient", fields: [recipientId], references: [id])
  recipientId String?

  // Add these fields for threading
  parentId    String?   // ID of the parent message (null for top-level messages)
  parent      Message?  @relation("Replies", fields: [parentId], references: [id])
  replies     Message[] @relation("Replies")
  replyCount  Int       @default(0)

  reads     MessageRead[]

  isAIResponse Boolean @default(false)

  @@index([channelId])
  @@index([recipientId])
}

model File {
  id        String   @id @default(cuid())
  message   Message  @relation(fields: [messageId], references: [id])
  messageId String
  url       String
  fileType  String
  createdAt DateTime @default(now())
}

model MessageRead {
  id        String   @id @default(cuid())
  message   Message  @relation(fields: [messageId], references: [id])
  messageId String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  channelId String?  // null for direct messages
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([messageId, userId])
  @@index([userId, channelId])
  @@index([userId, messageId])
}

model AIProofingSettings {
  id                String   @id @default(cuid())
  user              User     @relation(fields: [userId], references: [id])
  userId            String   @unique
  proofBeforeSend   Boolean  @default(false)
  proofAfterSend    Boolean  @default(false)
  autoAcceptChanges Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Proofing preferences
  checkGrammar      Boolean  @default(true)
  checkTone        Boolean  @default(true)
  checkClarity     Boolean  @default(true)
  checkSensitivity Boolean  @default(true)
  
  // Tone preferences
  preferredTone    String?  // e.g., "professional", "casual", "friendly"
  formality       Int      @default(5) // Scale of 1-10
} 