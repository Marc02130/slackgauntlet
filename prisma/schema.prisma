generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String        @id @default(cuid())
  name           String
  email          String        @unique
  profilePicture String?
  status         String?
  userRole       String        @default("USER")
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  channels       ChannelUser[]
  messages       Message[]     // Messages sent by this user
  receivedMessages Message[]   @relation("MessageRecipient") // Messages received by this user
}

model Channel {
  id        String        @id @default(cuid())
  name      String
  isPrivate Boolean      @default(false)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  users     ChannelUser[]
  messages  Message[]
}

model ChannelUser {
  id        String   @id @default(cuid())
  channel   Channel  @relation(fields: [channelId], references: [id])
  channelId String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  joinedAt  DateTime @default(now())

  @@unique([channelId, userId])
}

model Message {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  files     File[]
  
  // Sender
  user      User     @relation(fields: [userId], references: [id])
  userId    String

  // Optional channel (null for direct messages)
  channel   Channel? @relation(fields: [channelId], references: [id])
  channelId String?

  // Optional recipient (null for channel messages)
  recipient User?    @relation("MessageRecipient", fields: [recipientId], references: [id])
  recipientId String?

  @@index([channelId])
  @@index([recipientId])
}

model File {
  id        String   @id @default(cuid())
  message   Message  @relation(fields: [messageId], references: [id])
  messageId String
  url       String
  fileType  String
  createdAt DateTime @default(now())
} 